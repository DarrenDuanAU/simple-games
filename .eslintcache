[{"/Users/darren/Desktop/GitHub_projects/simple-games/src/index.js":"1","/Users/darren/Desktop/GitHub_projects/simple-games/src/App.js":"2","/Users/darren/Desktop/GitHub_projects/simple-games/src/Blanko.jsx":"3","/Users/darren/Desktop/GitHub_projects/simple-games/src/Slido.jsx":"4","/Users/darren/Desktop/GitHub_projects/simple-games/src/Tetro.jsx":"5","/Users/darren/Desktop/GitHub_projects/simple-games/src/data/blanko.js":"6"},{"size":197,"mtime":1682574770843,"results":"7","hashOfConfig":"8"},{"size":2820,"mtime":1682921942786,"results":"9","hashOfConfig":"8"},{"size":5447,"mtime":1682659318403,"results":"10","hashOfConfig":"8"},{"size":7563,"mtime":1682676601757,"results":"11","hashOfConfig":"8"},{"size":5347,"mtime":1684737359022,"results":"12","hashOfConfig":"8"},{"size":164,"mtime":1682574770841,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1v6l22c",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/darren/Desktop/GitHub_projects/simple-games/src/index.js",[],["30","31"],"/Users/darren/Desktop/GitHub_projects/simple-games/src/App.js",[],"/Users/darren/Desktop/GitHub_projects/simple-games/src/Blanko.jsx",["32"],"import React, { useState, useEffect } from 'react';\nimport { strs } from './data/blanko.js';\n// import {\n//   Link,\n//   // useParams\n// } from 'react-router-dom';\n// import { useContext, Context } from '../context';\n// import { v4 } from 'uuid'\n\nfunction Blanko () {\n  const numOfStrs = strs.length;\n  const [targetStr, setTargetStr] = useState(strs[0]);\n  const [incompleteStr, setIncompleteStr] = useState('');\n  const [answer, setAnswer] = useState('');\n  const [inputList, setInputList] = useState(['', '', '', '', '', '', '', '', '', '', '', ''])\n\n  // let inputList = '            ';\n\n  useEffect(() => {\n    newRandomStr();\n  }, []);\n\n  function resetAllInput () {\n    setInputList(['', '', '', '', '', '', '', '', '', '', '', '']);\n  }\n\n  function newRandomStr () {\n    resetAllInput();\n    let temp_targetStr = '';\n    let temp_incompleteStr = '';\n    while(true){\n      const randomIndex = Math.floor(Math.random()*numOfStrs);\n      if(strs[randomIndex] !== targetStr){\n        temp_targetStr = strs[randomIndex];\n        temp_incompleteStr = strs[randomIndex];\n        break\n      }\n    }\n    setTargetStr(temp_targetStr);\n\n    let temp_inputIndex = [];\n    while (temp_inputIndex.length < 3){\n      let randomIndex = Math.floor(Math.random()*(targetStr.length));\n      if(temp_targetStr[randomIndex]!== ' ' && !temp_inputIndex.includes(randomIndex)){\n        temp_inputIndex.push(randomIndex);\n        console.log('push', randomIndex, 'in the inputIndex')\n      }\n    }\n    \n    for( let i=0; i<12; i++) {\n      for(let j=0; j<3; j++){\n        if(temp_inputIndex[j] === i){\n          temp_incompleteStr = temp_incompleteStr.substring(0, i) + '?' + temp_incompleteStr.substring(i + 1);\n          console.log('temp', temp_incompleteStr)\n        }\n      }\n    }\n    setIncompleteStr(temp_incompleteStr);\n    setAnswer(temp_incompleteStr);\n  }\n\n  function checkResult (e) {\n    const inputId = e.target.id.substr(13, 14);\n    console.log('inputId', inputId);\n    let temp_inputList = inputList;\n    temp_inputList[Number(inputId)] = e.target.value;\n    setInputList(temp_inputList);\n    console.log(e.target.value, targetStr[Number(inputId)])\n    for( let i=0; i<12; i++) {\n      if (i === Number(inputId)) {\n        if (e.target.value ==='') {\n          setAnswer (answer.substring(0, i) + '?' + answer.substring(i + 1));\n        }else {\n          setAnswer (answer.substring(0, i) + e.target.value + answer.substring(i + 1));\n          if((answer.substring(0, i) + e.target.value + answer.substring(i + 1)) === targetStr) {\n            let score = Number(localStorage.getItem('score'));\n            score = score + 1;\n            localStorage.setItem('score', score);\n            setTimeout(()=>{\n              alert('Correct!');\n            }, 0)\n          }\n        }\n      }\n    }\n      \n  }\n\n  return (\n    <>\n      <div id='blankoPage'>\n        <div className='bigBox'>    \n          <div className='smallBox'>{ incompleteStr[0] ==='?' ? <><input value={inputList[0]} id ='Blanko-input-0' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[0]}</div>\n          <div className='smallBox'>{ incompleteStr[1] ==='?' ? <><input value={inputList[1]} id ='Blanko-input-1' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[1]}</div>\n          <div className='smallBox'>{ incompleteStr[2] ==='?' ? <><input value={inputList[2]} id ='Blanko-input-2' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[2]}</div>\n          <div className='smallBox'>{ incompleteStr[3] ==='?' ? <><input value={inputList[3]} id ='Blanko-input-3' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[3]}</div>\n          <div className='smallBox'>{ incompleteStr[4] ==='?' ? <><input value={inputList[4]} id ='Blanko-input-4' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[4]}</div>\n          <div className='smallBox'>{ incompleteStr[5] ==='?' ? <><input value={inputList[5]} id ='Blanko-input-5' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[5]}</div>\n          <div className='smallBox'>{ incompleteStr[6] ==='?' ? <><input value={inputList[6]} id ='Blanko-input-6' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[6]}</div>\n          <div className='smallBox'>{ incompleteStr[7] ==='?' ? <><input value={inputList[7]} id ='Blanko-input-7' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[7]}</div>\n          <div className='smallBox'>{ incompleteStr[8] ==='?' ? <><input value={inputList[8]} id ='Blanko-input-8' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[8]}</div>\n          <div className='smallBox'>{ incompleteStr[9] ==='?' ? <><input value={inputList[9]} id ='Blanko-input-9'  maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[9]}</div>\n          <div className='smallBox'>{ incompleteStr[10] ==='?' ? <><input value={inputList[10]} id ='Blanko-input-10' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[10]}</div>\n          <div className='smallBox'>{ incompleteStr[11] ==='?' ? <><input value={inputList[11]} id ='Blanko-input-11' maxLength={1} onChange={checkResult} type=\"text\" /></>:targetStr[11]}</div>\n        </div>\n        <button className='bt' onClick={newRandomStr}>reset game</button>\n        {/* t: {targetStr} <br />\n        i: {incompleteStr} <br />\n        a: {answer} <br /> */}\n        {/* {inputMessage} */}\n      </div>\n    </>\n  )\n}\nexport default Blanko;","/Users/darren/Desktop/GitHub_projects/simple-games/src/Slido.jsx",["33","34","35","36","37","38","39","40","41","42"],"import React, { useEffect, useRef } from 'react';\n// import {\n//   Link,\n//   // useParams\n// } from 'react-router-dom';\n// import { useContext, Context } from '../context';\n// import { v4 } from 'uuid'\nimport part1 from './data/shrek/1.png';\nimport part2 from './data/shrek/2.png';\nimport part3 from './data/shrek/3.png';\nimport part4 from './data/shrek/4.png';\nimport part5 from './data/shrek/5.png';\nimport part6 from './data/shrek/6.png';\nimport part7 from './data/shrek/7.png';\nimport part8 from './data/shrek/8.png';\n\nfunction Slido () {\n  const image_1_Ref = useRef(),\n    image_2_Ref = useRef(),\n    image_3_Ref = useRef(),\n    image_4_Ref = useRef(),\n    image_5_Ref = useRef(),\n    image_6_Ref = useRef(),\n    image_7_Ref = useRef(),\n    image_8_Ref = useRef(),\n    image_9_Ref = useRef();\n  \n  useEffect(() => {\n    resetImage();\n  },[]);\n  \n  const checkPositionList = (targetNum) => {\n    if (targetNum === 1){\n      return [2, 4];\n    } else if(targetNum === 2) {\n      return [1, 3, 5];\n    } else if(targetNum === 3) {\n      return [2, 6];\n    } else if(targetNum === 4) {\n      return [1, 5, 7];\n    } else if(targetNum === 5) {\n      return [2, 4, 6, 8];\n    } else if(targetNum === 6) {\n      return [3, 5, 9];\n    } else if(targetNum === 7) {\n      return [4, 8];\n    } else if(targetNum === 8) {\n      return [5, 7, 9];\n    } else if(targetNum === 9) {\n      return [6, 8];\n    }\n  }\n\n  const getEmptyPosition = (List) => {\n    // console.log(image_1_Ref.current.src);\n    // console.log(image_2_Ref.current.src);\n    // console.log(image_3_Ref.current.src);\n    // console.log(image_4_Ref.current.src);\n    // console.log(image_5_Ref.current.src);\n    // console.log(image_6_Ref.current.src);\n    // console.log(image_7_Ref.current.src);\n    // console.log(image_8_Ref.current.src);\n    // console.log(image_9_Ref.current.src);\n\n    for( let i = 0; i < List.length; i++) {\n      // console.log('checking position:', List[i])\n      if (List[i] === 1 && image_1_Ref.current.src === 'http://localhost:3000/slido') {\n        return image_1_Ref;\n      } else if (List[i] === 2 && image_2_Ref.current.src === 'http://localhost:3000/slido') {\n        return image_2_Ref;\n      } else if (List[i] === 3 && image_3_Ref.current.src === 'http://localhost:3000/slido') {\n        return image_3_Ref;\n      } else if (List[i] === 4 && image_4_Ref.current.src === 'http://localhost:3000/slido') {\n        return image_4_Ref;\n      } else if (List[i] === 5 && image_5_Ref.current.src === 'http://localhost:3000/slido') {\n        return image_5_Ref;\n      } else if (List[i] === 6 && image_6_Ref.current.src === 'http://localhost:3000/slido') {\n        return image_6_Ref;\n      } else if (List[i] === 7 && image_7_Ref.current.src === 'http://localhost:3000/slido') {\n        return image_7_Ref;\n      } else if (List[i] === 8 && image_8_Ref.current.src === 'http://localhost:3000/slido') {\n        return image_8_Ref;\n      } else if (List[i] === 9 && image_9_Ref.current.src === 'http://localhost:3000/slido') {\n        return image_9_Ref;\n      }\n    }\n    return null;   \n  }\n\n  const swapPosition = (e) => {\n    // console.log(e.target.id.substr(1,2));\n    // console.log('clicked image src is :', e.target.src)\n    const checkList = checkPositionList(Number(e.target.id.substr(1,2)));\n    // console.log('Check list is:', checkList)\n    const targetPosition = getEmptyPosition(checkList);\n    // console.log('the target position is :', targetPosition)\n    // console.log('the target position s src is  :', targetPosition.current.src)\n    if (targetPosition !== null) {\n      targetPosition.current.src = e.target.src;\n      e.target.src = '';\n      checkAnswer();\n    }\n\n  }\n\n  function shuffle(list) {\n    let ctr = list.length,\n      temp,\n      index;\n    while (ctr > 0) {\n      index = Math.floor(Math.random() * ctr);\n      ctr--;\n      temp = list[ctr];\n      list[ctr] = list[index];\n      list[index] = temp;\n    }\n    return list;\n  }\n\n  const resetImage = () => {\n    // console.log(image_1_Ref.current);\n    let imageList =[part1, part2, part3, part4, part5, part6, part7, part8, '']\n    imageList = shuffle(imageList);\n    image_1_Ref.current.src = imageList[0];\n    image_2_Ref.current.src = imageList[1];\n    image_3_Ref.current.src = imageList[2];\n    image_4_Ref.current.src = imageList[3];\n    image_5_Ref.current.src = imageList[4];\n    image_6_Ref.current.src = imageList[5];\n    image_7_Ref.current.src = imageList[6];\n    image_8_Ref.current.src = imageList[7];\n    image_9_Ref.current.src = imageList[8];\n\n  }\n  const solveIt = () => {\n    let imageList =[part1, part2, part3, part4, part5, part6, part7, part8, '']\n    image_1_Ref.current.src = imageList[0];\n    image_2_Ref.current.src = imageList[1];\n    image_3_Ref.current.src = imageList[2];\n    image_4_Ref.current.src = imageList[3];\n    image_5_Ref.current.src = imageList[4];\n    image_6_Ref.current.src = imageList[5];\n    image_7_Ref.current.src = imageList[6];\n    image_8_Ref.current.src = imageList[7];\n    image_9_Ref.current.src = imageList[8];\n\n  }\n\n  const checkAnswer = () => {\n    const resultList = [part1, part2, part3, part4, part5, part6, part7, part8]\n    if (image_1_Ref.current.src.substr(21,image_1_Ref.current.src.length) === resultList[0] &&\n      image_2_Ref.current.src.substr(21,image_2_Ref.current.src.length) === resultList[1] &&\n      image_3_Ref.current.src.substr(21,image_3_Ref.current.src.length) === resultList[2] &&\n      image_4_Ref.current.src.substr(21,image_4_Ref.current.src.length) === resultList[3] &&\n      image_5_Ref.current.src.substr(21,image_5_Ref.current.src.length) === resultList[4] &&\n      image_6_Ref.current.src.substr(21,image_6_Ref.current.src.length) === resultList[5] &&\n      image_7_Ref.current.src.substr(21,image_7_Ref.current.src.length) === resultList[6] &&\n      image_8_Ref.current.src.substr(21,image_8_Ref.current.src.length) === resultList[7]) {\n        alert('Correct!');\n        let score = Number(localStorage.getItem('score'));\n        score = score + 1;\n        localStorage.setItem('score', score);\n      } else {\n        console.log('No')\n      }\n  }\n\n  return (\n    <>\n      <div id='slidoPage'>\n        <div id='container'>\n          <div className='cell'><img width={148} id='c1' src='' ref={image_1_Ref} onClick={swapPosition} ></img></div>\n          <div className='cell'><img width={148} id ='c2' src='' ref={image_2_Ref} onClick={swapPosition}></img></div>\n          <div className='cell'><img width={148} id ='c3' src='' ref={image_3_Ref} onClick={swapPosition}></img></div>\n          <div className='cell'><img width={148} id ='c4' src='' ref={image_4_Ref} onClick={swapPosition}></img></div>\n          <div className='cell'><img width={148} id ='c5' src='' ref={image_5_Ref} onClick={swapPosition}></img></div>\n          <div className='cell'><img width={148} id ='c6' src='' ref={image_6_Ref} onClick={swapPosition}></img></div>\n          <div className='cell'><img width={148} id ='c7' src='' ref={image_7_Ref} onClick={swapPosition}></img></div>\n          <div className='cell'><img width={148} id ='c8' src='' ref={image_8_Ref} onClick={swapPosition}></img></div>\n          <div className='cell'><img width={148} id ='c9' src='' ref={image_9_Ref} onClick={swapPosition}></img></div>\n        </div>\n        <div>\n          <button className='bt' onClick={solveIt}>Solve</button>\n          <button className='bt' onClick={resetImage}>Reset</button>\n          <button className='bt' onClick={checkAnswer}>check</button>\n        </div>\n      </div>\n    </>\n  )\n}\nexport default Slido;","/Users/darren/Desktop/GitHub_projects/simple-games/src/Tetro.jsx",["43"],"import React, { useEffect, useRef, useState } from 'react';\n\nfunction Cell(props) {\n  // return <div id={props.index} className=\"tetro-cell-default\">{props.index}</div>;\n  return <div id={props.index} className=\"tetro-cell-default\"></div>;\n}\n\nfunction Tetro () {\n  const ROWMAX = 10;\n  const COLMAX = 6;\n  const containerRef = useRef(null);\n  const [started, setStarted] = useState(false);\n  const [reachedBot,setReachedBot] = useState(false);\n  // let coloredCellIndexs = [];\n  const [timer, setTimer] = useState(0)\n  const [blockPosition, setBlockPosition] = useState([]);\n\n  useEffect(() => {\n    if(reachedBot){\n      createObject();\n      setReachedBot(false);\n    }\n  }, [reachedBot]);\n\n  useEffect(() => {\n      if(started){\n        setInterval(() => {\n          setTimer((prevTimer) => prevTimer + 1);\n        }, 1000);\n      }  \n  }, [started]);\n  \n  useEffect(() => {\n    console.log(timer);\n    handleObject('Down');\n  }, [timer]);\n\n  const handleObject = (direction) => {\n    let coloredCellIndexs = blockPosition;\n    if (coloredCellIndexs.length === 0){\n      console.log('handleObject: error! not valid block info.')\n      return\n    }\n\n    console.log('coloredCellIndexs', coloredCellIndexs)\n    let originRow = coloredCellIndexs[0];\n    let originCol = coloredCellIndexs[1];\n    let rowMax = coloredCellIndexs[2];\n    let colMax = coloredCellIndexs[3];\n\n    // const undercell = document.getElementById(`${rowMax+1}-${originCol}`);\n    // console.log(`${rowMax+1}-${originCol}`, undercell.className)\n\n    if(direction === 'Down'){\n      if (rowMax === ROWMAX) {\n        console.log('reached the bottom');\n        setReachedBot(true);\n        return\n      } else {\n        const underCell = document.getElementById(`${rowMax+1}-${originCol}`);\n        if(originCol !== colMax) {\n          const secUnderCell = document.getElementById(`${rowMax+1}-${colMax}`);\n          if (secUnderCell.className !== 'tetro-cell-default') {\n            console.log('bottom reached other block');\n            setReachedBot(true);\n            return\n          }\n        }\n        if (underCell.className !== 'tetro-cell-default') {\n          console.log('bottom reached other block');\n          setReachedBot(true);\n          return\n        }\n      }\n    } else if (direction === 'Left' && (originCol === 1)) {\n      console.log('reached the most Left');\n      return\n    } else if (direction === 'Right' && (colMax === COLMAX)) {\n      console.log('reached the most Right');\n      return\n    }\n\n    // console.log(originRow, originCol, rowMax, colMax)\n    for (let row = originRow; row <= rowMax; row++) {\n      for (let col = originCol; col <= colMax; col++) {\n        const cell = document.getElementById(`${row}-${col}`);\n        // console.log('make cell to default', cell);\n        cell.classList = 'tetro-cell-default';\n      }\n    }\n    if(direction === 'Down' && (rowMax + 1<= ROWMAX)){\n      originRow = originRow + 1;\n      rowMax = rowMax + 1;\n    } else if (direction === 'Left' && (originCol - 1 >= 1)) {\n      originCol = originCol - 1;\n      colMax = colMax - 1;\n    } else if (direction === 'Right' && (colMax + 1<= COLMAX)) {\n      originCol = originCol + 1;\n      colMax = colMax + 1;\n    }\n    for (let row = originRow; row <= rowMax; row++) {\n      for (let col = originCol; col <= colMax; col++) {\n        const cell = document.getElementById(`${row}-${col}`);\n        // console.log('cell colored', cell);\n        cell.classList = 'tetro-cell-color1';\n      }\n    }\n    coloredCellIndexs = [originRow, originCol, rowMax, colMax];\n    setBlockPosition(coloredCellIndexs);\n  }\n\n  const createObject = () => {\n    let coloredCellIndexs = [];\n    let rowMax = 0;\n    let colMax = 0;\n    const originRow = 1;\n    const originCol = 1;\n    const randomNum = Math.floor(Math.random()*3);\n    // console.log(randomNum);\n    if(randomNum === 0) {\n      rowMax = 1;\n      colMax = 1;\n    } else if (randomNum === 1) {\n      rowMax = 2;\n      colMax = 1;\n    } else if (randomNum === 2) {\n      rowMax = 2;\n      colMax = 2;\n    }\n    \n    for (let row = originRow; row <= rowMax; row++) {\n      for (let col = originCol; col <= colMax; col++) {\n        const cell = document.getElementById(`${row}-${col}`);\n        // console.log('cell', cell);\n        cell.classList = 'tetro-cell-color1';\n      }\n    }\n    coloredCellIndexs = [originRow, originCol, rowMax, colMax];\n    console.log('coloredCellIndexs', coloredCellIndexs)\n    setBlockPosition(coloredCellIndexs);\n    setStarted(true);\n  }\n  const startGame = () => {\n    console.log('start!')\n  }\n\n  const cells = [];\n  for (let row = 1; row <= ROWMAX; row++) {\n    for (let col = 1; col <= COLMAX; col++) {\n      cells.push(<Cell key={`${row}-${col}`} row={row} col={col} index={`${row}-${col}`} />);\n    }\n  }\n  return (\n    <>\n      <div id='tetroPage'>\n        <div id='tetro_container' onClick={startGame} ref={containerRef}>{cells}</div>\n        <div>\n          <button id='my-btn' className='bt' onClick={createObject}>start</button>\n          <button className='bt' onClick={() => { setTimer((prevTimer) => prevTimer + 1)}}>down</button>\n          <button className='bt' onClick={() => {handleObject('Left')}}>left</button>\n          <button className='bt' onClick={() => {handleObject('Right')}}>right</button>\n        </div>\n      </div>\n    </>\n  )\n}\nexport default Tetro;","/Users/darren/Desktop/GitHub_projects/simple-games/src/data/blanko.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":21,"column":6,"nodeType":"50","endLine":21,"endColumn":8,"suggestions":"51"},{"ruleId":"48","severity":1,"message":"52","line":30,"column":5,"nodeType":"50","endLine":30,"endColumn":7,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":172,"column":33,"nodeType":"56","endLine":172,"endColumn":107},{"ruleId":"54","severity":1,"message":"55","line":173,"column":33,"nodeType":"56","endLine":173,"endColumn":107},{"ruleId":"54","severity":1,"message":"55","line":174,"column":33,"nodeType":"56","endLine":174,"endColumn":107},{"ruleId":"54","severity":1,"message":"55","line":175,"column":33,"nodeType":"56","endLine":175,"endColumn":107},{"ruleId":"54","severity":1,"message":"55","line":176,"column":33,"nodeType":"56","endLine":176,"endColumn":107},{"ruleId":"54","severity":1,"message":"55","line":177,"column":33,"nodeType":"56","endLine":177,"endColumn":107},{"ruleId":"54","severity":1,"message":"55","line":178,"column":33,"nodeType":"56","endLine":178,"endColumn":107},{"ruleId":"54","severity":1,"message":"55","line":179,"column":33,"nodeType":"56","endLine":179,"endColumn":107},{"ruleId":"54","severity":1,"message":"55","line":180,"column":33,"nodeType":"56","endLine":180,"endColumn":107},{"ruleId":"48","severity":1,"message":"57","line":36,"column":6,"nodeType":"50","endLine":36,"endColumn":13,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'newRandomStr'. Either include it or remove the dependency array.","ArrayExpression",["61"],"React Hook useEffect has a missing dependency: 'resetImage'. Either include it or remove the dependency array.",["62"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'handleObject'. Either include it or remove the dependency array.",["63"],"no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [newRandomStr]",{"range":"70","text":"71"},"Update the dependencies array to be: [resetImage]",{"range":"72","text":"73"},"Update the dependencies array to be: [handleObject, timer]",{"range":"74","text":"75"},[637,639],"[newRandomStr]",[845,847],"[resetImage]",[933,940],"[handleObject, timer]"]